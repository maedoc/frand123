# This is supposed to run from a plain opensuse container.
#
# The coverage we output in the end is a percentage of the number of tests passed.
# It works by defining the number of tests to run, incrementing a coverage variable CV
# with each passed test, and printing the fraction w.r.t. number of tests. This is
# ugly but works.

# Global before_script to always install required packages
before_script:
   - zypper --non-interactive in make
   - zypper --non-interactive in gcc7
   - zypper --non-interactive in gcc7-fortran

# Two jobs with two stages: 'build' and 'test'
test_build:
   stage: build
   tags:
      - linux
   script:
      - SUFFIX=-7 make gcc=y lib64/frand123.so lib64/frand123.a
  
run_test: 
   before_script:
      - zypper --non-interactive in make
      - zypper --non-interactive in gcc7
      - zypper --non-interactive in gcc7-fortran
      - zypper --non-interactive in octave-cli
      - zypper --non-interactive in octave-forge-nan
      - zypper --non-interactive in octave-forge-statistics
   stage: test
   tags:
      - linux
   variables:
      CV: '0'
      CV_S: 'coverage:'
      N_TESTS: '5' # the number of tests we will be running
   script:
      #
      - echo "Running test testRandSingle with Threefry RNG"
      - make clean
      - SUFFIX=-7 make gcc=y testRandSingle && CV="$((CV + 1))"
      - CV_R=`echo "$CV $N_TESTS" | awk '{printf("%.1f\n", $1/$2*100)}'`
      - echo $CV_S "$CV_R"
      #
      - echo "Running test testRandDouble with Threefry RNG"
      - make clean
      - SUFFIX=-7 make gcc=y testRandDouble && CV="$((CV + 1))"
      - CV_R=`echo "$CV $N_TESTS" | awk '{printf("%.1f\n", $1/$2*100)}'`
      - echo $CV_S "$CV_R"
      #
      #- echo "Running test testRandSingle with ARS RNG"
      #- make clean
      #- SUFFIX=-7 make gcc=y ars=y testRandSingle && CV="$((CV + 1))"
      #- CV_R=`echo "$CV $N_TESTS" | awk '{printf("%.1f\n", $1/$2*100)}'`
      #- echo $CV_S "$CV_R"
      #
      - echo "Running test testRandDouble with ARS RNG"
      - make clean
      - SUFFIX=-7 make gcc=y ars=y testRandDouble && CV="$((CV + 1))"
      - CV_R=`echo "$CV $N_TESTS" | awk '{printf("%.1f\n", $1/$2*100)}'`
      - echo $CV_S "$CV_R"
   coverage: '/coverage: \d+\.\d+/'
   allow_failure: true
#  artifacts:
#    when: on_success
#    name: ...
#    paths:
#       - "*. ..."
